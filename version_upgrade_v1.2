#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[36m'
BLUE='\033]0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'


# error function uses for handling common error cases
function error(){
	local value=$1
	local num=$2

	if [ ${num} -eq 1 ]; then
		local str="version changing failed"
	elif [ ${num} -eq 2 ]; then
		local str="install prozone packages failed"
	elif [ ${num} -eq 3 ]; then
		local str="install nftables package failed"
	elif [ ${num} -eq 4 ]; then
		local str="motd service confirm failed"
	else
		local str="Fail!"
	fi

	if [ ${value} -ne 0 ]; then
		echo -e $RED"Error : ${str}"$NC
		exit 1
	fi
}

## For motd-news.service inactive
function motd_news_inactive(){
	#local pw=$1
	echo $pw | sudo -S apt --fix-broken -y install
	#echo $pw | sudo -S apt-get -y install expect > /dev/null

	echo -e $CYAN"\n========= motd.news disable"$NC
	echo $pw | sudo -S sed -i "s/ENABLED=1/ENABLED=0/g" /etc/default/motd-news
	file_motd_dpkg="/etc/update-motd.d/50-motd-news.dpkg-dist"
	#file_motd="/etc/update-motd.d/50-motd-news"

	exit_code_dpkg_which=`grep -r "ProLinux" $file_motd_dpkg`
	#exit_code_which=`grep -r "ProLinux" $file_motd`

	if [ -a $file_motd_dpkg ]; then
		if [[ "$exit_code_dpkg_which" =~ [ProLinux] ]]; then 
            echo -e $CYAN"There is exit code here"$NC
        else
            echo $pw | sudo -S sed -i 's/# Source the local configuration/# Source the local configuration\n# ProLinux exit code\nexit 0/g' $file_motd_dpkg
        fi
	else
		echo $RED"There is no motd service"$NC
		exit 1
	fi

	echo -e $CYAN"\n========= motd.news disable finish !!"$NC
}

# help menu
function helpmenu(){
echo -e "*** ProLinux v4.0.0 to v4.1.1 upgrade tool ***"
cat <<-END
Usage: ./version_upgrade [OPTION] ...
This will upgrade ProLinux version as you wish
Example: 
         ./version_upgrade -h
         ./version_upgrade -v
         ./version_upgrade -p

OPTION:
    -h, --help        Display this message
    -v, --version     version_upgrade tools version
    -p, --password    Enter password to start version_upgrade tools

END
}

## kernel upgrading which download at prolinux repository
function kernel_upgrade(){
	local pw=$1

	wget -c http://tmaxlinux-repo.tmaxos.com/k_modules/kernel_modules-4.18.10-3-generic.tar
	stdout=`echo $?`
	if [ $stdout -eq 0 ]; then
		tar -xvf kernel_modules-4.18.10-3-generic.tar 
		echo $pw | sudo -S dpkg -i $PWD/kernel_modules-4.18.10-3-generic/*.deb
		echo $pw | sudo -S cp $PWD/kernel_modules-4.18.10-3-generic/*.ko /lib/modules/4.18.10-3-generic/kernel/fs/
		stdout_copy=`echo $?`
		if [ $stdout_copy -eq 1 ]; then
			echo -e $RED"Error to get kernel modules packages..."$NC
			exit 1
		fi
		echo -e
		echo -e $CYAN"*** You will reboot... then it will choice kernel 4.18.10-3-generic ***"$NC
		echo -e $CYAN"*** After reboot ***"$NC
		echo -e $CYAN"*** Run version_upgrade one more time ***"$NC
		exit 0
	else
		echo $RED"Error to get kernel modules packages..."$NC
		exit 1
	fi
}


## making directory for using log
function mkdir_upgrade_log(){
	DATE=`date "+%Y %m/%d %H:%M:%S"`
    upgrade_dir=".upgrade"
    
    if [ -d "$upgrade_dir" ]; then
        echo -e $CYAN"=================================== $DATE =================================="$NC
        echo -e $CYAN"Ready!!\n"$NC
    else
        mkdir .upgrade
        echo -e $CYAN"=================================== $DATE =================================="$NC
        echo -e $CYAN"Ready!!\n"$NC
    fi

}

## log manage
function log_manage(){
	fileDATE=`date "+%Y%m%d_%H%M"`
	mv .upgrade/upgrade_log .upgrade/upgrade_log_$fileDATE
}

## upgrade artful -> bionic logic
function do_release_upgrade(){
	echo -e $CYAN"=============== Ready to version upgrade"$NC
    echo $pw | sudo -S apt --fix-broken -y install > /dev/null 2>&1

    exist_ubuntu_manager_core=`apt list --installed 2>&1 | grep ubuntu-release-upgrader-core | awk -F / '{ print $1 }'`
    if [ -z $exist_ubuntu_manager_core ]; then
        echo $pw | sudo -S apt-get -y remove update-manager-core
        echo $pw | sudo -S apt-get -y install ubuntu-server
        echo $pw | sudo -S apt-get -y install update-manager-core
        echo $pw | sudo -S apt-get -y install update-notifier-common
    else
        echo $pw | sudo -S apt-get -y remove ubuntu-release-upgrader-core
        echo $pw | sudo -S apt-get -y install ubuntu-release-upgrader-core
        echo $pw | sudo -S apt-get -y install ubuntu-server
        echo $pw | sudo -S apt-get -y install update-manager-core
        echo $pw | sudo -S apt-get -y install update-notifier-common
    fi
    ## will be deprecated
    #echo $pw | sudo -S apt-get -y remove ubuntu-release-upgrader-core > /dev/null 
    #echo $pw | sudo -S apt-get -y install ubuntu-release-upgrader-core > /dev/null

    echo -e $CYAN".\c" ; sleep 1 ; echo -e ".\c" ; sleep 1 ; echo -e "."$NC

    ## it will be removed upgrade_log
    #echo $pw | sudo -S rm -f upgrade_log


    ## do-release-upgrade 
    ## checking if upgradable. if it is already upgrade, then modify services
    echo -e $CYAN"=============== << 1 >> version upgrading start..."$NC
    do_result=`do-release-upgrade -c`
    if [[ "$do_result" =~ "No new release found." ]]; then
        echo -e $CYAN"\n=============== << 1 >> version upgrading finished !!"$NC
    else
        echo -e $CYAN"If it is upgraded, then will reboot"$NC
        echo -e $CYAN"So run this program ** one more time. **"$NC
        while true; do
            echo -e $CYAN"version check(c) version upgrade(u) exit(x)"$NC
            read options
            if [ "$options" = "c" ]; then
                do-release-upgrade -c
            elif [ "$options" = "u" ]; then
                do-release-upgrade
                break
            elif [ "$options" = "x" ]; then
                exit 0
            else
                echo -e $RED"Wrong options"$NC
            fi
        done
    fi
}



## start upgrade function
function start_upgrade(){
	local pw=$1
	uname=`uname -r`
	echo -e $YELLOW"This kernel is "$uname $NC

	## root password checking
	
	echo $pw | sudo -S -k touch .upgrade/confirm
	stdout_pw_1=`echo $?`
	if [ "$stdout_pw_1" -eq 0 ]; then
	    echo $pw | sudo -S rm -f .upgrade/confirm
		stdout_pw_2=`echo $?`
		if [ "$stdout_pw_2" -eq 0 ]; then
			echo -e $CYAN"confirmed!"$NC
		else
			echo -e $RED"Password is wrong. Check for it."$NC
			exit 1
		fi
	else
		echo -e $RED"Password is wrong. Check for it."$NC
        exit 1
	fi


	kernel_dir="/lib/modules/4.18.10-3-generic"
	kernel_release=`uname -r`
	if [ -d "$kernel_dir" ]; then
		if [ "$kernel_release" = "4.18.10-3-generic" ]; then
			echo -e $CYAN"=============== Kernel already upgrade !!"$NC
		else
			kernel_upgrade $pw
		fi
	else
		kernel_upgrade $pw
	fi

	if [ -z ${pw} ]; then
		echo -e 
		echo -e $RED"Enter password for using authentication for service!!"$NC
		exit 1
	fi

	# start
	echo -e $CYAN"=============== ProLinux version v4.0 to v4.1 upgrade ..."$NC

	##### Modify /etc/lsb-release /etc/os-release CODENAME=artful if CODENAME=4 
	lsb_codename=`grep -w "4$" /etc/lsb-release`
	os_codename=`grep -w "4$" /etc/os-release`
	check_codename=`grep -r "VERSION_CODENAME" /etc/os-release | awk -F= '{ print $2 }'`
	
	if [ -z $lsb_codename ]; then
		echo -e $CYAN"===== lsb codename is $check_codename"$NC
	else
		echo $pw | sudo -S sed -i -e "s/DISTRIB_CODENAME=4/DISTRIB_CODENAME=artful/g" /etc/lsb-release
		echo -e $CYAN"===== lsb codename change artful"$NC
	fi

	if [ -z $os_codename ]; then
		echo -e $CYAN"===== os codename is $check_codename"$NC
	else
		echo $pw | sudo -S sed -i -e "s/VERSION_CODENAME=4/VERSION_CODENAME=artful/g" /etc/os-release
		echo $pw | sudo -S sed -i -e "s/PROLINUX_CODENAME=4/PROLINUX_CODENAME=artful/g" /etc/os-release
		echo -e $CYAN"===== os codename change artful"$NC
	fi

	if [ "$check_codename" = "artful" ]; then
		echo -e $CYAN"===== codename : $check_codename"$NC
		do_release_upgrade
	elif [ "$check_codename" = "bionic" ]; then
		echo -e $CYAN"===== codename : bionic "$NC
	else	
		echo -e $RED"===== os codename is strange... exit"$NC
		exit 1
	fi

	########################################################################################
	echo -e $CYAN"\n=============== << 2 >> version upgrading start..."$NC
	sleep 1
	
	file_os="/etc/os-release.prev"
	file_lsb="/etc/lsb-release.prev"

	## file version checking and modifying
	if [ ! -f "$file_os" ];then
		echo $pw | sudo -S cp /etc/os-release /etc/os-release.prev &&
		echo $pw | sudo -S cp /etc/lsb-release /etc/lsb-release.prev

		error $? 1

		echo 'NAME="ProLinux"
VERSION="ProLinux 4.1.1 (Bionic Beaver)"
ID=prolinux
ID_LIKE=debian
PRETTY_NAME="ProLinux 4.1.1"
VERSION_ID="4.1.1"
VERSION_CODENAME=bionic
PROLINUX_CODENAME=bionic' >> $HOME/os-release

		echo 'DISTRIB_ID=ProLinux
DISTRIB_RELEASE=4.1.1
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION="ProLinux 4.1.1"' >> $HOME/lsb-release

		echo $pw | sudo -S mv $HOME/os-release /etc/os-release
		echo $pw | sudo -S mv $HOME/lsb-release /etc/lsb-release

		error $? 1

		echo $pw | sudo -S cp /etc/issue /etc/issue.prev &&
		echo $pw | sudo -S cp /etc/issue.net /etc/issue.net.prev

		error $? 1
	
		echo $pw | sudo -S echo 'ProLinux 4.1.1 \n \l' >> $HOME/issue
		echo $pw | sudo -S echo 'ProLinux 4.1.1' >> $HOME/issue.net

		echo $pw | sudo -S mv $HOME/issue /etc/issue
		echo $pw | sudo -S mv $HOME/issue.net /etc/issue.net

		error $? 1
		echo -e $CYAN"\n=============== << 2 >> version upgrading finished !!"$NC
	else
		echo -e $CYAN"\n=============== << 2 >> version upgrading finished !!"$NC
	fi
	

	## installing prozone packages
	while true; do
		echo -e $CYAN"\n=============== Do you want to install prozone packages? [y/n]"$NC
		read answer

		if [ "$answer" = "y" ]; then
			echo -e $CYAN"\n=============== Install prozone packages ..."$NC
			sleep 1
			echo "..."

			echo $pw | sudo -S apt-get -y install vim gcc g++ libstdc++5 libaio1 libaio-dev unzip openssh-server openssh-client sshpass net-tools websockify python3 expect socat flex awscli curl procmail software-properties-common jq bridge-utils arptables iproute2 lxc qemu-kvm genisoimage cloud-utils openvpn quota nfs-kernel-server nfs-common rpcbind xmlstarlet libvirt-bin libvirt-dev virt-viewer qemu-system-x86 qemu-block-extra python-netaddr openjdk-8-jdk

			error $? 2

			break

		elif [ "$answer" = "n" ]; then
			echo -e $CYAN"\n Prozone package is not installed"$NC
			echo -e
			break	
		else
			echo $RED"Wrong options"$NC
		fi
	done

	## Remove Prozone repository ip
	echo -e "=============== Remove Prozone repository IP... "
	echo $pw | sudo -S sed -i "s/\# This is Prozone repository (ProLinux)//g" /etc/apt/sources.list
	echo $pw | sudo -S sed -i "s/# deb \[arch=amd64\] http:\/\/175.195.163.192:8080\/tmax_repo\/prozone artful main//g" /etc/apt/sources.list
	echo -e $CYAN"=============== Remove Prozone repository IP finish"$NC


	## Install ProLinux Mono package
	while true; do
		echo -e $CYAN"\n=============== Do you want to install Mono packages? [y/n]"$NC
		read mono_answer

		if [ "$mono_answer" = "y" ]; then
			echo -e $CYAN"Install Mono package...\n"$NC
			sshpass -p 'tmax@23' scp -o StrictHostKeyChecking=no -r root@192.168.60.135:/root/temp/LinuxProject_versionUpgrade/mono/ ./ > /dev/null
			touch $HOME/.upgrade/mono_log
			cd $PWD/mono
			echo $pw | sudo -S dpkg -i --force-all *.deb >> $HOME/.upgrade/mono_log 2>&1
			echo $pw | sudo -S rm -rf $PWD/mono > /dev/null
			mono --version
			break
		elif [ "$mono_answer" = "n" ]; then
			echo -e $CYAN"\n Mono package is not installed"$NC
			break
		else
			echo -e $RED"Wrong options"$NC
		fi
	done


	##### Modify /etc/update-motd.d/10-help-text /etc/update-motd.d/10-help-text
	re_help_text=`grep -r "#printf" /etc/update-motd.d/10-help-text`
	if [ -z "$re_help_text" ]; then
		echo $pw | sudo -S sed -i "s/printf/#printf/g" /etc/update-motd.d/10-help-text
	else
		echo -e $CYAN"===== no help text"$NC
	fi

	landscape_file="/etc/update-motd.d/50-landscape-sysinfo"

	if [ -f "$landscape_file" ]; then
		echo $pw | sudo -S rm -f /etc/update-motd.d/50-landscape-sysinfo
	else
		echo -e $CYAN"===== no landscape"$NC
	fi

	echo -e $CYAN"\n=============== motd.service finish"$NC
	
	#motd_news_inactive $pw
	motd_news_inactive

	echo -e $CYAN"-------------------------------------"$NC
	echo -e $YELLOW"Vesion Changed finished! Please reboot the server. 
	And Check systemctl status is all running"$NC
	log_manage
	exit 0
}

# Execute with argument options
while [ $# -ne 0 ]
do
    case "$1" in

        --version | -v)
            echo "v1.1.0"
			exit
            ;;
		--help | -h)
			helpmenu
			exit
			;;
        --password | -p)
			mkdir_upgrade_log
			start_upgrade $2 | tee .upgrade/upgrade_log
			exit
			;;
		*)
			echo -e $RED"Wrong parameter enter... use -h, --help option to read help"$NC
			exit 1
			;;
    esac
    shift
done

if [ $# -eq 0 ]; then
	echo -e $RED"Wrong parameter enter... use -h, --help option to read help"$NC
	exit 1
fi

