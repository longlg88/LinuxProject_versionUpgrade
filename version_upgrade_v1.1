#!/bin/bash

# error function uses for handling common error cases
function error(){
	local value=$1
	local num=$2

	if [ ${num} -eq 1 ]; then
		local str="version changing failed"
	elif [ ${num} -eq 2 ]; then
		local str="install prozone packages failed"
	elif [ ${num} -eq 3 ]; then
		local str="install nftables package failed"
	elif [ ${num} -eq 4 ]; then
		local str="motd service confirm failed"
	else
		local str="Fail!"
	fi

	if [ ${value} -ne 0 ]; then
		echo "Error : ${str}"
		exit 1
	fi
}

## For motd-news.service inactive
function motd_news_inactive(){
	#local pw=$1
	sudo apt --fix-broken -y install
	#sudo apt-get -y install expect > /dev/null

	echo -e "\n ========= motd.news disable"
	sudo sed -i "s/ENABLED=1/ENABLED=0/g" /etc/default/motd-news
	file_motd_dpkg="/etc/update-motd.d/50-motd-news.dpkg-dist"
	#file_motd="/etc/update-motd.d/50-motd-news"

	exit_code_dpkg_which=`grep -r "TmaxLinux" $file_motd_dpkg`
	#exit_code_which=`grep -r "TmaxLinux" $file_motd`

	#if [ -a $file_motd ]; then
	#	if [[ "$exit_code_which" =~ [TmaxLinux] ]]; then
	#		echo "exists"
	#	else
	#		sed -i 's/# Source the local configuration/# Source the local configuration\n# TmaxLinux exit code\nexit 0/g' $file_motd
	#	fi
	if [ -a $file_motd_dpkg ]; then
		if [[ "$exit_code_dpkg_which" =~ [TmaxLinux] ]]; then 
            echo "There is exit code here"
        else
            sudo sed -i 's/# Source the local configuration/# Source the local configuration\n# TmaxLinux exit code\nexit 0/g' $file_motd_dpkg
        fi
	else
		echo "There is no motd service"
		exit 1
	fi
		

	# Will be deprecated	
	#expect -c "
	#spawn systemctl disable motd-news.timer
	#expect 'Password:'
	#		send \"$pw\\r\"
	#	expect 'Password:'
	#		send \"$pw\\r\"
	#	expect eof
	#	"
	echo -e "\n ========= motd.news disable finish !!"
}

# help menu
function helpmenu(){
echo -e "*** TmaxLinux v4.0.0 to v4.1.1 upgrade tool ***"
cat <<-END
Usage: ./version_upgrade [OPTION] ...
This will upgrade TmaxLinux version as you wish
Example: 
         ./version_upgrade -h
         ./version_upgrade -v
         ./version_upgrade -p

OPTION:
    -h, --help        Display this message
    -v, --version     version_upgrade tools version
    -p, --password    Enter password to start version_upgrade tools

END
}

function kernel_upgrade(){
	local pw=$1
	wget -c http://175.195.163.6:8080/k_modules/kernel_modules-4.18.10-3-generic.tar
	stdout=`echo $?`
	if [ $stdout -eq 0 ]; then
		tar -xvf kernel_modules-4.18.10-3-generic.tar 
		echo $pw | sudo -S dpkg -i $PWD/kernel_modules-4.18.10-3-generic/*.deb
		cp $PWD/kernel_modules-4.18.10-3-generic/*.ko /lib/modules/4.18.10-3-generic/kernel/fs/
		
		echo -e
		echo -e "*** You will reboot... then it will choice kernel 4.18.10-3-generic ***"
		echo -e "*** After reboot ***"
		echo -e "*** Run version_upgrade one more time ***"
		exit 0
	else
		echo "Error to get kernel modules packages..."
		exit 1
	fi
}

function mkdir_upgrade_log(){
	DATE=`date "+%Y %m/%d %H:%M:%S"`
    upgrade_dir=".upgrade"
    
    if [ -d "$upgrade_dir" ]; then
        echo -e "=================================== $DATE ==================================" 
        echo -e "Ready!!" 
    else
        mkdir .upgrade
        echo -e "=================================== $DATE ==================================" 
        echo -e "Ready!!" 
    fi

}

function log_manage(){
	fileDATE=`date "+%Y%m%d_%H%M"`
	mv .upgrade/upgrade_log .upgrade/upgrade_log_$fileDATE
}

## start upgrade function
function start_upgrade(){
	local pw=$1
    
	uname=`uname -r`
	echo "This kernel is "$uname

	kernel_dir="/lib/modules/4.18.10-3-generic"
	if [ -d "$kernel_dir" ]; then
		echo -e "=============== Kernel already upgrade !!"
	else
		kernel_upgrade $pw
	fi

	if [ -z ${pw} ]; then
		echo -e 
		echo -e "Enter password for using authentication for service!!" 
		exit 1
	fi

	# start
	echo "=============== TmaxLinux version v4.0 to v4.1 upgrade ..." 

	##### Modify /etc/lsb-release /etc/os-release CODENAME=artful if CODENAME=4 
	lsb_codename=`grep -w "4$" /etc/lsb-release`
	os_codename=`grep -w "4$" /etc/os-release`

	if [ -z $lsb_codename ]; then
		echo "===== lsb codename is artful" 
	else
		echo $pw | sudo -S sed -i -e "s/DISTRIB_CODENAME=4/DISTRIB_CODENAME=artful/g" /etc/lsb-release
		echo "===== lsb codename change artful"
	fi

	if [ -z $os_codename ]; then
		echo "===== os codename is artful"
	else
		echo $pw | sudo -S sed -i -e "s/VERSION_CODENAME=4/VERSION_CODENAME=artful/g" /etc/os-release
		sudo sed -i -e "s/TMAXLINUX_CODENAME=4/TMAXLINUX_CODENAME=artful/g" /etc/os-release
		echo "===== os codename change artful"
	fi




	echo -e "=============== Ready to version upgrade"
	echo $pw | sudo -S apt --fix-broken -y install > /dev/null 2>&1

	exist_ubuntu_manager_core=`apt list --installed 2>&1 | grep ubuntu-release-upgrader-core | awk -F / '{ print $1 }'`
	if [ -z $exist_ubuntu_manager_core ]; then
		echo $pw | sudo -S apt-get -y remove update-manager-core
		sudo apt-get -y install ubuntu-server
		sudo apt-get -y install update-manager-core
		sudo apt-get -y install update-notifier-common
	else
		echo $pw | sudo -S apt-get -y remove ubuntu-release-upgrader-core
		sudo apt-get -y install ubuntu-release-upgrader-core
        sudo apt-get -y install ubuntu-server
        sudo apt-get -y install update-manager-core
        sudo apt-get -y install update-notifier-common
	fi
	## will be deprecated
	#sudo apt-get -y remove ubuntu-release-upgrader-core > /dev/null 
	#sudo apt-get -y install ubuntu-release-upgrader-core > /dev/null
	
	echo -e ".\c" ; sleep 1 ; echo -e ".\c" ; sleep 1 ; echo -e "."
	
	## it will be removed upgrade_log
	#sudo rm -f upgrade_log
	

	## do-release-upgrade 
	## checking if upgradable. if it is already upgrade, then modify services
	echo -e "=============== << 1 >> version upgrading start..."
	do_result=`do-release-upgrade -c`
	if [[ "$do_result" =~ "No new release found." ]]; then
		echo -e "\n=============== << 1 >> version upgrading finished !!"
	else
		echo -e "If it is upgraded, then will reboot"
		echo -e "So run this program ** one more time. **"
		while true; do
			echo -e "version check(c) version upgrade(u) exit(x)"
			read options
			if [ "$options" = "c" ]; then
				do-release-upgrade -c
			elif [ "$options" = "u" ]; then
				do-release-upgrade
				break
			elif [ "$options" = "x" ]; then
				exit 0
			else
				echo "Wrong options"
			fi
		done
	fi
	
	########################################################################################
	echo -e "\n=============== << 2 >> version upgrading start..."
	sleep 1
	
	file_os="/etc/os-release.prev"
	file_lsb="/etc/lsb-release.prev"

	## file version checking and modifying
	if [ ! -f "$file_os" ];then
		sudo cp /etc/os-release /etc/os-release.prev &&
		sudo cp /etc/lsb-release /etc/lsb-release.prev

		error $? 1

		echo 'NAME="TmaxLinux"
VERSION="TmaxLinux 4.1.1 (Bionic Beaver)"
ID=tmaxlinux
ID_LIKE=debian
PRETTY_NAME="TmaxLinux 4.1.1"
VERSION_ID="4.1.1"
VERSION_CODENAME=bionic
TMAXLINUX_CODENAME=bionic' >> $HOME/os-release

		echo 'DISTRIB_ID=Tmaxlinux
DISTRIB_RELEASE=4.1.1
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION="TmaxLinux 4.1.1"' >> $HOME/lsb-release

		sudo mv $HOME/os-release /etc/os-release
		sudo mv $HOME/lsb-release /etc/lsb-release

		error $? 1

		sudo cp /etc/issue /etc/issue.prev &&
		sudo cp /etc/issue.net /etc/issue.net.prev

		error $? 1
	
		sudo echo 'TmaxLinux 4.1.1 \n \l' >> $HOME/issue
		sudo echo 'TmaxLinux 4.1.1' >> $HOME/issue.net

		sudo mv $HOME/issue /etc/issue
		sudo mv $HOME/issue.net /etc/issue.net

		error $? 1
		echo -e "\n=============== << 2 >> version upgrading finished !!"
	else
		echo -e "\n=============== << 2 >> version upgrading finished !!"
	fi
	

	## installing prozone packages
	while true; do
		echo -e "\n=============== Do you want to install prozone packages? [y/n]"
		read answer

		if [ "$answer" = "y" ]; then
			echo -e "\n=============== Install prozone packages ..."
			sleep 1
			echo "..."

			sudo apt-get -y install vim gcc g++ libstdc++5 libaio1 libaio-dev unzip openssh-server openssh-client sshpass net-tools websockify python3 expect socat flex awscli curl procmail software-properties-common jq bridge-utils arptables iproute2 lxc qemu-kvm genisoimage cloud-utils openvpn quota nfs-kernel-server nfs-common rpcbind xmlstarlet libvirt-bin libvirt-dev virt-viewer qemu-system-x86 qemu-block-extra python-netaddr openjdk-8-jdk

			error $? 2

			############################ Will be deprecated #######################
			#sshpass -p 'tmax@23' scp -o StrictHostKeyChecking=no -r root@192.168.60.135:/root/temp/nftables ./

			#cd $HOME/nftables
			#sudo dpkg -i *.deb

			#error $? 3
		
			#echo -e "\n===== Nftables version"
			#nft -v
			###########################################################################
			break

		elif [ "$answer" = "n" ]; then
			echo -e "\n Prozone package is not installed"
			echo -e
			break	
		else
			echo "Wrong options"
		fi
	done

	## motd service enable & motd-news service remove -- deprecated
	#echo -e "\n=============== motd.service enable"
	#file="/etc/update-motd.d/50-motd-news.dpkg-dist"
	#
	#if [ -f "$file" ]; then
	#	sudo mv /etc/update-motd.d/50-motd-news.dpkg-dist /etc/update-motd.d/50-motd-news
	#	error $? 4
	#	sudo systemctl restart motd-news.service
	#	echo -e "\n=============== motd.service restart sucess"
	#fi


	## Remove Prozone repository ip
	echo -e "=============== Remove Prozone repository IP... "
	sudo sed -i "s/\# This is Prozone repository (TmaxLinux)//g" /etc/apt/sources.list
	sudo sed -i "s/# deb \[arch=amd64\] http:\/\/175.195.163.192:8080\/tmax_repo\/prozone artful main//g" /etc/apt/sources.list
	echo -e "=============== Remove Prozone repository IP finish"


	## Install TmaxLinux Mono package
	while true; do
		echo -e "\n=============== Do you want to install Mono packages? [y/n]"
		read mono_answer

		if [ "$mono_answer" = "y" ]; then
			echo -e "Install Mono package...\n"
			sshpass -p 'tmax@23' scp -o StrictHostKeyChecking=no -r root@192.168.60.135:/root/temp/LinuxProject_versionUpgrade/mono/ ./ > /dev/null
			touch $HOME/.upgrade/mono_log
			cd $PWD/mono
			sudo dpkg -i --force-all *.deb >> $HOME/.upgrade/mono_log 2>&1
			sudo rm -rf $PWD/mono > /dev/null
			mono --version
			break
		elif [ "$mono_answer" = "n" ]; then
			echo -e "\n Mono package is not installed"
			break
		else
			echo "Wrong options"
		fi
	done


	##### Modify /etc/update-motd.d/10-help-text /etc/update-motd.d/10-help-text
	re_help_text=`grep -r "#printf" /etc/update-motd.d/10-help-text`
	if [ -z "$re_help_text" ]; then
		sudo sed -i "s/printf/#printf/g" /etc/update-motd.d/10-help-text
	else
		echo "===== no help text"
	fi

	landscape_file="/etc/update-motd.d/50-landscape-sysinfo"

	if [ -f "$landscape_file" ]; then
		sudo rm -f /etc/update-motd.d/50-landscape-sysinfo
	else
		echo "===== no landscape"
	fi

	echo -e "\n=============== motd.service finish"
	
	#motd_news_inactive $pw
	motd_news_inactive

	echo -e "-------------------------------------"
	echo -e "Vesion Changed finished! Please reboot the server. 
	And Check systemctl status is all running"
	log_manage
	exit 0
}

# Execute with argument options
while [ $# -ne 0 ]
do
    case "$1" in

        --version | -v)
            echo "v1.1.0"
			exit
            ;;
		--help | -h)
			helpmenu
			exit
			;;
        --password | -p)
			mkdir_upgrade_log
			start_upgrade $2 | tee .upgrade/upgrade_log
			exit
			;;
		*)
			echo "Wrong parameter enter... use -h, --help option to read help"
			exit 1
			;;
    esac
    shift
done

if [ $# -eq 0 ]; then
	echo "Wrong parameter enter... use -h, --help option to read help"
	exit 1
fi

